@startuml
interface channel.channelid.ChannelId {
    + AsShortText()
    + AsLongText()
}
class DefaultId implements channel.channelid.ChannelId {
    - data: []byte
    - shortValue: string
    - longValue: string
    --
    + AsShortText()
    + AsLongText()
}

interface channel.Handler {
    + ErrorCaught(c HandlerContext, err error)
}

interface channel.InboundHandler extends channel.Handler  {
    + ChannelActive(c HandlerContext)
    + ChannelInActive(c HandlerContext)
    + ChannelRead(c HandlerContext, msg interface{}) error
}

interface channel.OutboundHandler extends channel.Handler {
    + Write(c HandlerContext, msg interface{}) error
    + Flush(c HandlerContext) error
}

interface channel.InboundInvoker {
    + FireChannelActive()
    + FireChannelInActive()
    + FireChannelRead(msg interface{})
    + FireErrorCaught(err error)
}

interface channel.OutboundInvoker {
    + Write(msg interface{}) error
    + Flush() error
    + WriteAndFlush(msg interface{}) error
}

interface channel.HandlerContext extends channel.InboundInvoker, channel.OutboundInvoker  {
    + Channel() Channel
    + Name() string
    + Handler() Handler
    + Pipeline() Pipeline
    + ErrorCaught(err error)
}

interface channel.Pipeline extends channel.InboundInvoker, channel.OutboundInvoker {
    + AddIn(name string, handler Handler)
    + AddOut(name string, handler Handler)
    + First() Handler
    + FirstContext() HandlerContext
    + Last() Handler
    + LastContext() HandlerContext
    + Channel() Channel
    + Names() []string
}

interface channel.Channel extends util.AttributeMap {
    io.ReadWriteCloser
    + Id() channelid.ChannelId
    + LocalAddr() net.Addr
    + RemoteAddr() net.Addr
    + Pipeline() Pipeline
}

interface util.AttributeMap {
    + SetAttribute(key string, val interface{})
    + GetAttribute(key string) interface{}
    + GetBoolAttribute(key string) bool
    + GetStringAttribute(key string) string
    + HasAttribute(key string) bool
}

class util.DefaultAttributeMap implements util.AttributeMap {
    - attrs: map[string] interface{}
    --
    + SetAttribute(key string, val interface{})
    + GetAttribute(key string) interface{}
    + GetBoolAttribute(key string) bool
    + GetStringAttribute(key string) string
    + HasAttribute(key string) bool
}

class channel.DefaultChannel extends util.DefaultAttributeMap implements channel.Channel {
    - conn     net.Conn
    - id       channelid.ChannelId
    - pipeline Pipeline
    --
    + Id() channelid.ChannelId
    + LocalAddr() net.Addr
    + RemoteAddr() net.Addr
    + Pipeline() Pipeline
}

class channel.DefaultHandlerContext implements channel.HandlerContext {
    - next: channel.HandlerContext
    - prev: channel.HandlerContext
    - pipeline: channel.Pipeline
    - name: string
}

channel.Pipeline *-- channel.DefaultHandlerContext
channel.DefaultHandlerContext o-- channel.DefaultPipeline
class channel.HeadContext extends channel.DefaultHandlerContext {
}

class channel.TailContext extends channel.DefaultHandlerContext {
}

class channel.DefaultPipeline implements channel.Pipeline {
    - in: *channel.DefaultHandlerContext
    - out: *channel.DefaultHandlerContext
    - channel: channel.Channel
}
@enduml